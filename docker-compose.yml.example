version: "3"

services:
  postgres:
    image: "postgres:16.2"
    ports:
      - "5432:5432"
    env_file:
      - config/postgres/config.env
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
  # Image for migrations apply
  goose_up:
    image: "artsafin/goose-migrations:latest"
    depends_on:
      - postgres
    env_file:
      - config/migration/goose.env
    volumes:
      - ./migrations:/migrations
    command: [ "up" ]
  redis:
    image: redis:7.2.4
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
  prometheus:
    image: prom/prometheus:v2.21.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/:/etc/prometheus/
    command:
      - --web.enable-lifecycle
      - --config.file=/etc/prometheus/prometheus.yml
  application:
    build:
      context: .
      dockerfile: ./dbservice/Dockerfile
    depends_on:
      - postgres
      - redis
    volumes:
      - ./config/database-service:/etc/opt/database-service
    environment:
      - CONFIG_PATH=/etc/opt/database-service/config.yml
    command: ["./main"]
    ports:
      - "8080:8080"
  run_tests:
    build:
      context: .
      dockerfile: ./dbservice/Dockerfile_tests
    volumes:
      - ./:/app
    command: ["go", "test", "./..."]

#  create_data:
#    build:
#      context: .
#      dockerfile: ./utilities/create_data/Dockerfile
#    depends_on:
#      - application
#    command: [ "./create_data", "-users=500000", "-data=20", "-workers=6" ]

#  load_generator:
#    build:
#      context: .
#      dockerfile: ./utilities/load_generator/Dockerfile
#    depends_on:
#      - application
#    environment:
#      - HOST=http://application:8080
#    command: ["./load_generator", "-rps=600", "-host=http://application:8080"]
#    restart: always